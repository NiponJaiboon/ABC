# การทดสอบรัน Docker Compose

## ขั้นตอนการรัน

1. **เปิด Terminal** และนำทางไปยังโฟลเดอร์ที่มีไฟล์ docker-compose.yml:

   ```bash
   cd /Users/nevelopdevper/iDev/ABC
   ```

2. **รันระบบทั้งหมด**:

   ```bash
   docker compose up
   ```

   หรือรันในโหมด detached (ทำงานเบื้องหลัง):

   ```bash
   docker compose up -d
   ```

3. **รอให้ระบบเริ่มทำงาน** (อาจใช้เวลาสักครู่ในการ build images ครั้งแรก)

## การทดสอบระบบ

1. **ทดสอบ Backend API**:
   - เปิดเบราว์เซอร์ไปที่: http://localhost:5000/swagger
   - หรือทดสอบด้วย curl: `curl http://localhost:5000/weatherforecast`

2. **ทดสอบ Frontend**:
   - เปิดเบราว์เซอร์ไปที่: http://localhost:3000

3. **ตรวจสอบฐานข้อมูล**:
   - เชื่อมต่อ SQL Server ด้วยโปรแกรมจัดการฐานข้อมูล (เช่น Azure Data Studio)
   - Host: localhost
   - Port: 1433
   - User: sa
   - Password: YourStrongPassword!
   - Database: ABC

## การดูบันทึก (Logs)

```bash
# ดูบันทึกทั้งหมด
docker-compose logs

# ดูบันทึกเฉพาะ service
docker-compose logs backend
docker-compose logs frontend
docker-compose logs db

# ดูบันทึกแบบ real-time
docker-compose logs -f
```

## การจัดการคอนเทนเนอร์

```bash
# หยุดการทำงาน
docker-compose down

# หยุดและลบ volumes (ข้อมูลในฐานข้อมูลจะหายไป)
docker-compose down -v

# สร้าง build ใหม่
docker-compose build

# รีสตาร์ทเฉพาะบริการ
docker-compose restart backend
```

## การแก้ไขปัญหาเบื้องต้น

- หากมีปัญหาการเชื่อมต่อระหว่าง services ให้ตรวจสอบ network settings
- หากฐานข้อมูลเชื่อมต่อไม่ได้ ลอง wait-for-it script หรือใช้ depends_on condition
- ถ้า frontend ไม่สามารถเชื่อมต่อ API ได้ ตรวจสอบค่า NEXT_PUBLIC_API_URL

ต้องการคำแนะนำเพิ่มเติมในส่วนไหนไหมครับ?

Project Structure แนะนำ:
ABC/
├── .env.development        # Local dev secrets
├── .env.production        # Production secrets
├── docker-compose.yml     # Production
├── docker-compose.dev.yml # Development (ถ้าจำเป็น)
├── Backend/
│   └── src/API/
│       ├── appsettings.Development.json
│       └── appsettings.Production.json
└── scripts/
    ├── dev.sh            # dotnet watch run
    ├── build.sh          # docker build
    └── deploy.sh         # docker compose up

Migration
# ABC Project

## Database Management

### Development Environment

#### Method 1: dotnet CLI (แนะนำ)
```bash
cd Backend/src/API

# สร้าง migration
dotnet ef migrations add MigrationName

# อัพเดท database
dotnet ef database update
```

#### Method 2: Automatic Migration (ระวัง!)
```csharp
// Program.cs - ใช้เฉพาะ Development และ Database ใหม่
if (app.Environment.IsDevelopment())
{
    context.Database.Migrate(); // อาจ error ถ้า table มีอยู่แล้ว
}
```

### Production Environment

#### ⚠️ ห้ามใช้ Automatic Migration
```bash
# สร้าง SQL script
dotnet ef migrations script --output migration.sql

# Review script ก่อน
cat migration.sql

# รัน script ใน Production Database manually
psql -h your-host -U username -d database -f migration.sql
```

### แก้ไขปัญหา Table Already Exists

#### วิธีที่ 1: Empty Migration
```bash
dotnet ef migrations add SyncExistingTables
# แก้ไขไฟล์ให้ Up() และ Down() ว่าง
dotnet ef database update
```

#### วิธีที่ 2: Manual Sync
```sql
INSERT INTO "__EFMigrationsHistory" ("MigrationId", "ProductVersion")
VALUES ('20241225000000_InitialCreate', '8.0.0');
```

## Development Workflow

### การพัฒนาปกติ:
```bash
# Terminal 1: Backend Development
cd Backend/src/API
dotnet watch run

# Terminal 2: Database Operations
cd Backend/src/API
dotnet ef migrations add NewFeature
dotnet ef database update

# Terminal 3: Frontend Development
cd Frontend/abc-client
npm run dev
```

### การ Deploy:
```bash
# 1. สร้าง Migration Script
dotnet ef migrations script --output migration.sql

# 2. Deploy Application
docker compose up -d

# 3. รัน Migration Script manually
# (ผ่าน Supabase Dashboard หรือ CLI)
```

## ⚠️ คำเตือน

- **ห้ามใช้ automatic migration ใน Production**
- **ตรวจสอบ migration script ก่อน deploy**
- **Backup database ก่อน migration เสมอ**
- **Test migration ใน staging environment ก่อน**
