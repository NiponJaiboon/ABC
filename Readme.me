# ‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏£‡∏±‡∏ô Docker Compose

## ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏ô

1. **‡πÄ‡∏õ‡∏¥‡∏î Terminal** ‡πÅ‡∏•‡∏∞‡∏ô‡∏≥‡∏ó‡∏≤‡∏á‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ó‡∏µ‡πà‡∏°‡∏µ‡πÑ‡∏ü‡∏•‡πå docker-compose.yml:

   ```bash
   cd /Users/nevelopdevper/iDev/ABC
   ```

2. **‡∏£‡∏±‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î**:

   ```bash
   docker compose up
   ```

   ‡∏´‡∏£‡∏∑‡∏≠‡∏£‡∏±‡∏ô‡πÉ‡∏ô‡πÇ‡∏´‡∏°‡∏î detached (‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÄ‡∏ö‡∏∑‡πâ‡∏≠‡∏á‡∏´‡∏•‡∏±‡∏á):

   ```bash
   docker compose up -d
   ```

3. **‡∏£‡∏≠‡πÉ‡∏´‡πâ‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ó‡∏≥‡∏á‡∏≤‡∏ô** (‡∏≠‡∏≤‡∏à‡πÉ‡∏ä‡πâ‡πÄ‡∏ß‡∏•‡∏≤‡∏™‡∏±‡∏Å‡∏Ñ‡∏£‡∏π‡πà‡πÉ‡∏ô‡∏Å‡∏≤‡∏£ build images ‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÅ‡∏£‡∏Å)

## ‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏£‡∏∞‡∏ö‡∏ö

1. **‡∏ó‡∏î‡∏™‡∏≠‡∏ö Backend API**:
   - ‡πÄ‡∏õ‡∏¥‡∏î‡πÄ‡∏ö‡∏£‡∏≤‡∏ß‡πå‡πÄ‡∏ã‡∏≠‡∏£‡πå‡πÑ‡∏õ‡∏ó‡∏µ‡πà: http://localhost:5000/swagger
   - ‡∏´‡∏£‡∏∑‡∏≠‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏î‡πâ‡∏ß‡∏¢ curl: `curl http://localhost:5000/weatherforecast`

2. **‡∏ó‡∏î‡∏™‡∏≠‡∏ö Frontend**:
   - ‡πÄ‡∏õ‡∏¥‡∏î‡πÄ‡∏ö‡∏£‡∏≤‡∏ß‡πå‡πÄ‡∏ã‡∏≠‡∏£‡πå‡πÑ‡∏õ‡∏ó‡∏µ‡πà: http://localhost:3000

3. **‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•**:
   - ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ SQL Server ‡∏î‡πâ‡∏ß‡∏¢‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• (‡πÄ‡∏ä‡πà‡∏ô Azure Data Studio)
   - Host: localhost
   - Port: 1433
   - User: sa
   - Password: YourStrongPassword!
   - Database: ABC

## ‡∏Å‡∏≤‡∏£‡∏î‡∏π‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å (Logs)

```bash
# ‡∏î‡∏π‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
docker-compose logs

# ‡∏î‡∏π‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏â‡∏û‡∏≤‡∏∞ service
docker-compose logs backend
docker-compose logs frontend
docker-compose logs db

# ‡∏î‡∏π‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÅ‡∏ö‡∏ö real-time
docker-compose logs -f
```

## ‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≠‡∏ô‡πÄ‡∏ó‡∏ô‡πÄ‡∏ô‡∏≠‡∏£‡πå

```bash
# ‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô
docker-compose down

# ‡∏´‡∏¢‡∏∏‡∏î‡πÅ‡∏•‡∏∞‡∏•‡∏ö volumes (‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏∞‡∏´‡∏≤‡∏¢‡πÑ‡∏õ)
docker-compose down -v

# ‡∏™‡∏£‡πâ‡∏≤‡∏á build ‡πÉ‡∏´‡∏°‡πà
docker-compose build

# ‡∏£‡∏µ‡∏™‡∏ï‡∏≤‡∏£‡πå‡∏ó‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£
docker-compose restart backend
```

## ‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡πÄ‡∏ö‡∏∑‡πâ‡∏≠‡∏á‡∏ï‡πâ‡∏ô

- ‡∏´‡∏≤‡∏Å‡∏°‡∏µ‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á services ‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö network settings
- ‡∏´‡∏≤‡∏Å‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ ‡∏•‡∏≠‡∏á wait-for-it script ‡∏´‡∏£‡∏∑‡∏≠‡πÉ‡∏ä‡πâ depends_on condition
- ‡∏ñ‡πâ‡∏≤ frontend ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ API ‡πÑ‡∏î‡πâ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡πà‡∏≤ NEXT_PUBLIC_API_URL

‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°‡πÉ‡∏ô‡∏™‡πà‡∏ß‡∏ô‡πÑ‡∏´‡∏ô‡πÑ‡∏´‡∏°‡∏Ñ‡∏£‡∏±‡∏ö?

Project Structure ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥:
ABC/
‚îú‚îÄ‚îÄ .env.development        # Local dev secrets
‚îú‚îÄ‚îÄ .env.production        # Production secrets
‚îú‚îÄ‚îÄ docker-compose.yml     # Production
‚îú‚îÄ‚îÄ docker-compose.dev.yml # Development (‡∏ñ‡πâ‡∏≤‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô)
‚îú‚îÄ‚îÄ Backend/
‚îÇ   ‚îî‚îÄ‚îÄ src/API/
‚îÇ       ‚îú‚îÄ‚îÄ appsettings.Development.json
‚îÇ       ‚îî‚îÄ‚îÄ appsettings.Production.json
‚îî‚îÄ‚îÄ scripts/
    ‚îú‚îÄ‚îÄ dev.sh            # dotnet watch run
    ‚îú‚îÄ‚îÄ build.sh          # docker build
    ‚îî‚îÄ‚îÄ deploy.sh         # docker compose up

Migration
# ABC Project

## Database Management

### Development Environment

#### Method 1: dotnet CLI (‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥)
```bash
cd Backend/src/API

# ‡∏™‡∏£‡πâ‡∏≤‡∏á migration
dotnet ef migrations add MigrationName

# ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó database
dotnet ef database update
```

#### Method 2: Automatic Migration (‡∏£‡∏∞‡∏ß‡∏±‡∏á!)
```csharp
// Program.cs - ‡πÉ‡∏ä‡πâ‡πÄ‡∏â‡∏û‡∏≤‡∏∞ Development ‡πÅ‡∏•‡∏∞ Database ‡πÉ‡∏´‡∏°‡πà
if (app.Environment.IsDevelopment())
{
    context.Database.Migrate(); // ‡∏≠‡∏≤‡∏à error ‡∏ñ‡πâ‡∏≤ table ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß
}
```

### Production Environment

#### ‚ö†Ô∏è ‡∏´‡πâ‡∏≤‡∏°‡πÉ‡∏ä‡πâ Automatic Migration
```bash
# ‡∏™‡∏£‡πâ‡∏≤‡∏á SQL script
dotnet ef migrations script --output migration.sql

# Review script ‡∏Å‡πà‡∏≠‡∏ô
cat migration.sql

# ‡∏£‡∏±‡∏ô script ‡πÉ‡∏ô Production Database manually
psql -h your-host -U username -d database -f migration.sql
```

### ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏õ‡∏±‡∏ç‡∏´‡∏≤ Table Already Exists

#### ‡∏ß‡∏¥‡∏ò‡∏µ‡∏ó‡∏µ‡πà 1: Empty Migration
```bash
dotnet ef migrations add SyncExistingTables
# ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏´‡πâ Up() ‡πÅ‡∏•‡∏∞ Down() ‡∏ß‡πà‡∏≤‡∏á
dotnet ef database update
```

#### ‡∏ß‡∏¥‡∏ò‡∏µ‡∏ó‡∏µ‡πà 2: Manual Sync
```sql
INSERT INTO "__EFMigrationsHistory" ("MigrationId", "ProductVersion")
VALUES ('20241225000000_InitialCreate', '8.0.0');
```

## Development Workflow

### ‡∏Å‡∏≤‡∏£‡∏û‡∏±‡∏í‡∏ô‡∏≤‡∏õ‡∏Å‡∏ï‡∏¥:
```bash
# Terminal 1: Backend Development
cd Backend/src/API
dotnet watch run

# Terminal 2: Database Operations
cd Backend/src/API
dotnet ef migrations add NewFeature
dotnet ef database update

# Terminal 3: Frontend Development
cd Frontend/abc-client
npm run dev
```

### ‡∏Å‡∏≤‡∏£ Deploy:
```bash
# 1. ‡∏™‡∏£‡πâ‡∏≤‡∏á Migration Script
dotnet ef migrations script --output migration.sql

# 2. Deploy Application
docker compose up -d

# 3. ‡∏£‡∏±‡∏ô Migration Script manually
# (‡∏ú‡πà‡∏≤‡∏ô Supabase Dashboard ‡∏´‡∏£‡∏∑‡∏≠ CLI)
```

## ‚ö†Ô∏è ‡∏Ñ‡∏≥‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô

- **‡∏´‡πâ‡∏≤‡∏°‡πÉ‡∏ä‡πâ automatic migration ‡πÉ‡∏ô Production**
- **‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö migration script ‡∏Å‡πà‡∏≠‡∏ô deploy**
- **Backup database ‡∏Å‡πà‡∏≠‡∏ô migration ‡πÄ‡∏™‡∏°‡∏≠**
- **Test migration ‡πÉ‡∏ô staging environment ‡∏Å‡πà‡∏≠‡∏ô**


üí° Tips:
‡πÅ‡∏¢‡∏Å Frontend/Backend - deploy ‡∏Ñ‡∏ô‡∏•‡∏∞ platform
‡πÉ‡∏ä‡πâ Supabase - database ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏á‡∏ß‡∏•
Setup CI/CD - auto-deploy ‡πÄ‡∏°‡∏∑‡πà‡∏≠ push
Monitor Usage - ‡∏î‡∏π billing ‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏Å‡∏¥‡∏ô free tier
üéØ ‡πÅ‡∏ô‡∏ß‡∏ó‡∏≤‡∏á‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥:
Railway: Backend API
Vercel: Next.js Frontend
Supabase: Database (‡πÉ‡∏ä‡πâ‡πÄ‡∏î‡∏¥‡∏°‡∏ï‡πà‡∏≠‡πÑ‡∏î‡πâ)

# ‡∏™‡∏£‡πâ‡∏≤‡∏á migration ‡πÉ‡∏ô Infrastructure
dotnet ef migrations add InitialCreate \
  --project ../Infrastructure \
  --startup-project . \
  --context ApplicationDbContext \
  --output-dir Data/Migrations

# ‡∏£‡∏±‡∏ô migration
dotnet ef database update --project ../Infrastructure --startup-project . --context ApplicationDbContext

## üß™ **Test Strategy ‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏≤‡πÉ‡∏ä‡πâ:**

### **üìä Test Coverage ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà:**

#### **üèóÔ∏è Test Structure (Test Pyramid):**
```
        /\
       /  \
      / E2E \ (5-10%)
     /______\
    /        \
   / Integration \ (20-30%)
  /______________\
 /                \
/   Unit Tests      \ (70-80%)
\___________________/
```

#### **üìÅ Test Organization:**
```
Tests/Application.Tests/Services/
‚îú‚îÄ‚îÄ PortfolioServiceTests.cs              (17 Unit Tests - Mock-based)
‚îú‚îÄ‚îÄ PortfolioServiceIntegrationTests.cs   (2 Integration Tests - In-memory DB)
‚îú‚îÄ‚îÄ ProjectServiceTests.cs                (17 Unit Tests - Mock-based)
‚îî‚îÄ‚îÄ ProjectServiceIntegrationTests.cs     (13 Integration Tests - In-memory DB)

üéØ Total: 49 Tests - All Passing! ‚úÖ
```

### **üß™ Unit Tests (Mock-based) - ‡πÄ‡∏£‡πá‡∏ß, Isolated**
**PortfolioServiceTests (17 tests):**
- ‚úÖ Business logic validation
- ‚úÖ Error handling & edge cases  
- ‚úÖ Method call verification
- ‚úÖ Title length validation
- ‚úÖ User ownership logic

**ProjectServiceTests (17 tests):**
- ‚úÖ CRUD operations logic
- ‚úÖ Portfolio existence validation
- ‚úÖ Project title validation
- ‚úÖ User ownership verification
- ‚úÖ DateTime handling logic

### **üîß Integration Tests (In-memory DB) - Real scenarios**
**PortfolioServiceIntegrationTests (2 tests):**
- ‚úÖ Database persistence validation
- ‚úÖ EF Core navigation properties

**ProjectServiceIntegrationTests (13 tests):**
- ‚úÖ Complete CRUD workflows
- ‚úÖ Real database operations
- ‚úÖ Entity relationships testing
- ‚úÖ Data validation scenarios

### **‚ö° ‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏ô Tests:**
```bash
# Unit tests only (‡πÄ‡∏£‡πá‡∏ß - ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö development)
dotnet test --filter "PortfolioServiceTests"
dotnet test --filter "ProjectServiceTests"

# Integration tests (‡∏ä‡πâ‡∏≤‡∏Å‡∏ß‡πà‡∏≤ - ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö CI/CD)
dotnet test --filter "Integration"

# All tests
dotnet test
```

## üéØ **‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏ï‡∏Å‡∏ï‡πà‡∏≤‡∏á‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á Unit Tests vs Integration Tests**

### **üß™ Unit Tests (Mock-based)**
```csharp
// ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á: ProjectServiceTests.cs
[Fact]
public async Task CreateProjectAsync_WithValidProject_ReturnsCreatedProject()
{
    // Arrange - ‡πÉ‡∏ä‡πâ Mock objects
    _mockPortfolioService.Setup(p => p.PortfolioExistsAsync(1)).ReturnsAsync(true);
    _mockGenericRepository.Setup(r => r.AddAsync(It.IsAny<Project>())).Returns(Task.CompletedTask);
    
    // Act - ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ service
    var result = await _projectService.CreateProjectAsync(project);
    
    // Assert - ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö method calls ‡πÅ‡∏•‡∏∞ logic
    _mockPortfolioService.Verify(p => p.PortfolioExistsAsync(1), Times.Once);
    _mockGenericRepository.Verify(r => r.AddAsync(project), Times.Once);
}
```
**üéØ ‡∏à‡∏∏‡∏î‡∏õ‡∏£‡∏∞‡∏™‡∏á‡∏Ñ‡πå:** ‡∏ó‡∏î‡∏™‡∏≠‡∏ö business logic ‡πÅ‡∏¢‡∏Å‡∏™‡πà‡∏ß‡∏ô  
**‚ö° ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß:** ‡πÄ‡∏£‡πá‡∏ß‡∏°‡∏≤‡∏Å (milliseconds)  
**üõ°Ô∏è Isolation:** ‡πÅ‡∏¢‡∏Å‡∏Ç‡∏≤‡∏î‡∏à‡∏≤‡∏Å dependencies  
**üîç ‡∏Ç‡∏≠‡∏ö‡πÄ‡∏Ç‡∏ï:** Method/Class ‡πÄ‡∏î‡∏µ‡∏¢‡∏ß

### **üîß Integration Tests (In-memory Database)**
```csharp
// ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á: ProjectServiceIntegrationTests.cs
[Fact]
public async Task CreateProjectAsync_WithValidData_CreatesProject()
{
    // Arrange - ‡πÉ‡∏ä‡πâ real objects ‡∏Å‡∏±‡∏ö in-memory database
    var newProject = new Project { Title = "Test Project", PortfolioId = 1 };
    
    // Act - ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ service ‡∏à‡∏£‡∏¥‡∏á ‡πÑ‡∏õ‡∏ñ‡∏∂‡∏á database
    var result = await _projectService.CreateProjectAsync(newProject);
    
    // Assert - ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏à‡∏£‡∏¥‡∏á‡πÉ‡∏ô database
    var persistedProject = await _context.Projects.FindAsync(result.Id);
    persistedProject.Should().NotBeNull();
}
```
**üéØ ‡∏à‡∏∏‡∏î‡∏õ‡∏£‡∏∞‡∏™‡∏á‡∏Ñ‡πå:** ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏£‡πà‡∏ß‡∏°‡∏Å‡∏±‡∏ô‡∏Ç‡∏≠‡∏á‡∏´‡∏•‡∏≤‡∏¢ components  
**‚ö° ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß:** ‡∏ä‡πâ‡∏≤‡∏Å‡∏ß‡πà‡∏≤ ‡πÅ‡∏ï‡πà‡∏¢‡∏±‡∏á‡πÄ‡∏£‡πá‡∏ß  
**üåê Database:** In-memory database  
**üîç ‡∏Ç‡∏≠‡∏ö‡πÄ‡∏Ç‡∏ï:** ‡∏´‡∏•‡∏≤‡∏¢ layers ‡∏£‡πà‡∏ß‡∏°‡∏Å‡∏±‡∏ô

### **üìä ‡∏™‡∏£‡∏∏‡∏õ‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô:**
| ‡∏™‡∏ñ‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ì‡πå | ‡πÉ‡∏ä‡πâ Unit Tests | ‡πÉ‡∏ä‡πâ Integration Tests |
|-----------|---------------|---------------------|
| ‡∏ó‡∏î‡∏™‡∏≠‡∏ö Business Logic | ‚úÖ | ‚ùå |
| ‡∏ó‡∏î‡∏™‡∏≠‡∏ö Database Operations | ‚ùå | ‚úÖ |
| ‡∏ó‡∏î‡∏™‡∏≠‡∏ö Validation Rules | ‚úÖ | ‚ùå |
| ‡∏ó‡∏î‡∏™‡∏≠‡∏ö Entity Relationships | ‚ùå | ‚úÖ |
| Development Feedback | ‚úÖ | ‚ùå |
| CI/CD Pipeline | ‚úÖ | ‚úÖ |

‡∏™‡∏£‡∏∏‡∏õ‡∏Ñ‡∏∑‡∏≠ **Unit Tests** ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ó‡∏î‡∏™‡∏≠‡∏ö logic ‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß ‡∏™‡πà‡∏ß‡∏ô **Integration Tests** ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏£‡πà‡∏ß‡∏°‡∏Å‡∏±‡∏ô‡∏Ç‡∏≠‡∏á‡∏´‡∏•‡∏≤‡∏¢‡∏™‡πà‡∏ß‡∏ô - ‡∏ó‡∏±‡πâ‡∏á‡∏Ñ‡∏π‡πà‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡πÅ‡∏•‡∏∞‡πÉ‡∏ä‡πâ‡πÄ‡∏™‡∏£‡∏¥‡∏°‡∏Å‡∏±‡∏ô! üéØ
