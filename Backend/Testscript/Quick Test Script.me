NiponJaiboon: /Users/nevelopdevper/iDev/ABC/Backend/src/API/Controllers/PortfolioController.cs
/Users/nevelopdevper/iDev/ABC/Backend/src/API/Controllers/ProjectController.cs

‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á bash curl ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ó‡∏î‡∏™‡∏≠‡∏ö api ‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ó‡∏∏‡∏Å fucntion ‡∏ï‡∏≤‡∏° step ‡∏´‡∏ô‡πà‡∏≠‡∏¢

GitHub Copilot: I'll read the controller files to understand all the API endpoints, then create comprehensive curl commands for testing all functions. ‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ‡∏ú‡∏°‡∏à‡∏∞‡∏™‡∏£‡πâ‡∏≤‡∏á bash script ‡∏ó‡∏µ‡πà‡∏°‡∏µ curl commands ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ó‡∏î‡∏™‡∏≠‡∏ö API ‡∏ó‡∏∏‡∏Å function ‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô ‡πÅ‡∏ö‡πà‡∏á‡πÄ‡∏õ‡πá‡∏ô step-by-step:
````

````


Made changes.

‡∏ú‡∏°‡πÑ‡∏î‡πâ‡∏™‡∏£‡πâ‡∏≤‡∏á bash curl script ‡∏ó‡∏µ‡πà‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ó‡∏î‡∏™‡∏≠‡∏ö API ‡∏ó‡∏∏‡∏Å function ‡πÅ‡∏•‡πâ‡∏ß! üéâ

## ‡∏™‡∏£‡∏∏‡∏õ‡∏™‡∏¥‡πà‡∏á‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ:

### **üìã API Endpoints ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î:**

**Portfolio Controller (9 endpoints):**
- Health check
- CRUD operations (Create, Read, Update, Delete)
- Get by user ID
- Get with projects
- Toggle visibility

**Project Controller (9 endpoints):**
- CRUD operations
- Get by portfolio ID
- Get active/completed projects
- Mark as completed

### **üß™ Test Script Features:**
1. **Step-by-step testing** - ‡πÅ‡∏ö‡πà‡∏á‡πÄ‡∏õ‡πá‡∏ô steps ‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô
2. **Complete coverage** - ‡∏Ñ‡∏£‡∏≠‡∏ö‡∏Ñ‡∏•‡∏∏‡∏°‡∏ó‡∏∏‡∏Å API endpoints
3. **Real-world data** - ‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏£‡∏¥‡∏á‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏°‡∏≤‡∏¢
4. **Error testing** - ‡∏ó‡∏î‡∏™‡∏≠‡∏ö error cases
5. **Cleanup testing** - ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
6. **Quick script** - ‡∏°‡∏µ bash script ‡πÅ‡∏ö‡∏ö‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥

### **üéØ ‡∏ß‡∏¥‡∏ò‡∏µ‡πÉ‡∏ä‡πâ:**
1. ‡∏£‡∏±‡∏ô API server ‡∏Å‡πà‡∏≠‡∏ô
2. Copy-paste curl commands ‡∏ó‡∏µ‡∏•‡∏∞ step
3. ‡∏´‡∏£‡∏∑‡∏≠‡πÉ‡∏ä‡πâ Quick Test Script ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÅ‡∏ö‡∏ö‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥

Script ‡∏ô‡∏µ‡πâ‡∏à‡∏∞‡∏ä‡πà‡∏ß‡∏¢‡πÉ‡∏´‡πâ‡∏Ñ‡∏∏‡∏ì‡∏ó‡∏î‡∏™‡∏≠‡∏ö API ‡πÑ‡∏î‡πâ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô‡πÅ‡∏•‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡∏£‡∏∞‡∏ö‡∏ö! üöÄ

NiponJaiboon: ‡πÉ‡∏ä‡πâ Quick Test Script ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÅ‡∏ö‡∏ö‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥ ‡∏¢‡∏±‡∏á‡πÑ‡∏á

GitHub Copilot: ‡∏ú‡∏°‡∏à‡∏∞‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡∏ß‡∏¥‡∏ò‡∏µ‡πÉ‡∏ä‡πâ Quick Test Script ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ó‡∏î‡∏™‡∏≠‡∏ö API ‡πÅ‡∏ö‡∏ö‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥:

## üéØ **‡∏ß‡∏¥‡∏ò‡∏µ‡πÉ‡∏ä‡πâ Quick Test Script:**

### **Step 1: ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏° Environment**

1. **‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á jq (JSON processor):**
```bash
# ‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á‡πÉ‡∏ô macOS
brew install jq

# ‡∏´‡∏£‡∏∑‡∏≠‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á‡πÉ‡∏ô Ubuntu/Debian
sudo apt-get install jq
```

2. **‡∏£‡∏±‡∏ô API Server:**
```bash
cd /Users/nevelopdevper/iDev/ABC/Backend/src
dotnet run --project API
```

### **Step 2: ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå Script**

Made changes.

### **Step 3: ‡∏ó‡∏≥‡πÉ‡∏´‡πâ Script ‡∏£‡∏±‡∏ô‡πÑ‡∏î‡πâ** ### **Step 4: ‡∏ß‡∏¥‡∏ò‡∏µ‡∏£‡∏±‡∏ô Script**

**‡πÅ‡∏ö‡∏ö‡∏ó‡∏µ‡πà 1: ‡∏£‡∏±‡∏ô Script ‡πÅ‡∏ö‡∏ö‡πÄ‡∏ï‡πá‡∏°**
```bash
cd /Users/nevelopdevper/iDev/ABC/Backend
./test-api.sh
```

**‡πÅ‡∏ö‡∏ö‡∏ó‡∏µ‡πà 2: ‡∏£‡∏±‡∏ô‡πÅ‡∏ö‡∏ö Step-by-Step (‡∏ñ‡πâ‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏î‡∏π Output ‡∏ó‡∏µ‡∏•‡∏∞‡∏Ç‡∏±‡πâ‡∏ô)**
```bash
cd /Users/nevelopdevper/iDev/ABC/Backend
./test-api.sh | less
```

**‡πÅ‡∏ö‡∏ö‡∏ó‡∏µ‡πà 3: ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å Output ‡∏•‡∏á‡πÑ‡∏ü‡∏•‡πå**
```bash
cd /Users/nevelopdevper/iDev/ABC/Backend
./test-api.sh > test-results.log 2>&1
```

### **Step 5: ‡∏™‡∏£‡πâ‡∏≤‡∏á Script ‡πÅ‡∏ö‡∏ö Interactive**

Made changes.

‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ‡∏Ñ‡∏∏‡∏ì‡∏°‡∏µ **3 ‡∏ß‡∏¥‡∏ò‡∏µ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö API**:

## üéØ **‡∏ß‡∏¥‡∏ò‡∏µ‡πÉ‡∏ä‡πâ Quick Test Scripts:**

### **1. Script ‡πÅ‡∏ö‡∏ö‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‡πÄ‡∏ï‡πá‡∏°‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö:**
```bash
cd /Users/nevelopdevper/iDev/ABC/Backend
./test-api.sh
```
- ‡∏£‡∏±‡∏ô‡∏ó‡∏∏‡∏Å‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
- ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏Ñ‡∏£‡∏ö‡∏ó‡∏∏‡∏Å endpoint
- ‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö CI/CD ‡∏´‡∏£‡∏∑‡∏≠‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏£‡∏ß‡∏î‡πÄ‡∏£‡πá‡∏ß

### **2. Script ‡πÅ‡∏ö‡∏ö Interactive:**
```bash
cd /Users/nevelopdevper/iDev/ABC/Backend
./interactive-test.sh
```
- ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏ó‡∏µ‡∏•‡∏∞‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô
- ‡∏£‡∏≠‡πÉ‡∏´‡πâ‡∏Å‡∏î Enter ‡∏Å‡πà‡∏≠‡∏ô‡πÑ‡∏õ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ñ‡∏±‡∏î‡πÑ‡∏õ
- ‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ‡πÅ‡∏•‡∏∞‡∏î‡∏π‡∏ú‡∏•‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏Ç‡∏±‡πâ‡∏ô

### **3. Script ‡πÅ‡∏ö‡∏ö‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ú‡∏•:**
```bash
cd /Users/nevelopdevper/iDev/ABC/Backend
./test-api.sh > test-results.log 2>&1
cat test-results.log
```

## üìù **‡∏™‡∏¥‡πà‡∏á‡∏ó‡∏µ‡πà Script ‡∏à‡∏∞‡∏ó‡∏≥:**

1. ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ API ‡∏£‡∏±‡∏ô‡∏≠‡∏¢‡∏π‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
2. üß™ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö Health Check
3. üìä ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏î‡∏™‡∏≠‡∏ö (Portfolios & Projects)
4. üîç ‡∏ó‡∏î‡∏™‡∏≠‡∏ö GET endpoints ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
5. ‚úèÔ∏è ‡∏ó‡∏î‡∏™‡∏≠‡∏ö UPDATE ‡πÅ‡∏•‡∏∞ PATCH operations
6. ‚ùå ‡∏ó‡∏î‡∏™‡∏≠‡∏ö Error cases
7. üìã ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö
8. üßπ (Optional) ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏î‡∏™‡∏≠‡∏ö

## üö® **‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏£‡∏à‡∏≥:**
- ‡∏ï‡πâ‡∏≠‡∏á‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á `jq` ‡∏Å‡πà‡∏≠‡∏ô: `brew install jq`
- ‡∏ï‡πâ‡∏≠‡∏á‡∏£‡∏±‡∏ô API ‡∏Å‡πà‡∏≠‡∏ô: `dotnet run --project API`
- Script ‡∏à‡∏∞‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÉ‡∏ô database

‡∏•‡∏≠‡∏á run ‡∏î‡∏π‡∏Ñ‡∏£‡∏±‡∏ö! üöÄ

NiponJaiboon:  brew install jq
zsh: command not found: brew

GitHub Copilot: ‡∏≠‡πà‡∏≤‡∏≤! ‡∏Ñ‡∏∏‡∏ì‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á Homebrew ‡πÉ‡∏ô macOS ‡∏Ñ‡∏£‡∏±‡∏ö ‡πÉ‡∏´‡πâ‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á‡∏ï‡∏≤‡∏°‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ:

## üç∫ **‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á Homebrew ‡πÅ‡∏•‡∏∞ jq:**

### **Step 1: ‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á Homebrew**
```bash
# ‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á Homebrew
/bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
```

### **Step 2: ‡πÄ‡∏û‡∏¥‡πà‡∏° Homebrew ‡∏•‡∏á PATH**
```bash
# ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÉ‡∏ô .zshrc
echo 'eval "$(/opt/homebrew/bin/brew shellenv)"' >> ~/.zshrc
source ~/.zshrc
```

### **Step 3: ‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á jq**
```bash
brew install jq
```

---

## üîÑ **‡∏´‡∏£‡∏∑‡∏≠‡πÉ‡∏ä‡πâ‡∏ß‡∏¥‡∏ò‡∏µ‡∏≠‡∏∑‡πà‡∏ô‡πÅ‡∏ó‡∏ô Homebrew:**

### **‡∏ß‡∏¥‡∏ò‡∏µ‡∏ó‡∏µ‡πà 1: ‡πÉ‡∏ä‡πâ MacPorts (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)**
```bash
sudo port install jq
```

### **‡∏ß‡∏¥‡∏ò‡∏µ‡∏ó‡∏µ‡πà 2: ‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á‡∏à‡∏≤‡∏Å Binary**
```bash
# Download ‡πÅ‡∏•‡∏∞‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á jq ‡πÅ‡∏ö‡∏ö manual
curl -L https://github.com/stedolan/jq/releases/download/jq-1.6/jq-osx-amd64 -o jq
chmod +x jq
sudo mv jq /usr/local/bin/
```

### **‡∏ß‡∏¥‡∏ò‡∏µ‡∏ó‡∏µ‡πà 3: ‡πÉ‡∏ä‡πâ Node.js (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ npm)**
```bash
npm install -g jq-node
```

---

## üìù **‡∏´‡∏£‡∏∑‡∏≠‡πÉ‡∏ä‡πâ Script ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏ä‡πâ jq:**

‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏≠‡∏¢‡∏≤‡∏Å‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á jq ‡∏ú‡∏°‡∏à‡∏∞‡∏™‡∏£‡πâ‡∏≤‡∏á script ‡πÅ‡∏ö‡∏ö‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πâ jq ‡πÉ‡∏´‡πâ:

````bash
#!/bin/bash
# filepath: /Users/nevelopdevper/iDev/ABC/Backend/test-api-simple.sh

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

API_URL="http://localhost:5011"

echo -e "${BLUE}========================================${NC}"
echo -e "${BLUE}    ABC Portfolio API Testing Script   ${NC}"
echo -e "${BLUE}========================================${NC}"

# Function to test API endpoint
test_endpoint() {
    local method=$1
    local url=$2
    local data=$3
    local description=$4

    echo -e "\n${YELLOW}Testing: $description${NC}"
    echo -e "${BLUE}$method $url${NC}"

    if [ "$method" = "GET" ] || [ "$method" = "DELETE" ] || [ "$method" = "PATCH" ]; then
        if [ "$method" = "PATCH" ] && [ -n "$data" ]; then
            response=$(curl -s -w "\nHTTP_STATUS:%{http_code}" -X "$method" "$url" -H "Content-Type: application/json" -d "$data")
        else
            response=$(curl -s -w "\nHTTP_STATUS:%{http_code}" -X "$method" "$url")
        fi
    else
        response=$(curl -s -w "\nHTTP_STATUS:%{http_code}" -X "$method" "$url" -H "Content-Type: application/json" -d "$data")
    fi

    # Extract HTTP status code
    http_status=$(echo "$response" | grep "HTTP_STATUS:" | cut -d: -f2)
    body=$(echo "$response" | sed '/HTTP_STATUS:/d')

    if [ "$http_status" -ge 200 ] && [ "$http_status" -lt 300 ]; then
        echo -e "${GREEN}‚úì Success (Status: $http_status)${NC}"
        if [ -n "$body" ] && [ "$body" != "null" ]; then
            echo "$body" | head -5
            if [ $(echo "$body" | wc -l) -gt 5 ]; then
                echo "... (truncated)"
            fi
        fi
    else
        echo -e "${RED}‚úó Failed (Status: $http_status)${NC}"
        echo "$body"
    fi

    read -p "Press Enter to continue..."
}

# Start testing
echo -e "\n${GREEN}Starting API Tests...${NC}"

# Test 1: Health Check
test_endpoint "GET" "$API_URL/api/Portfolio/test" "" "Health Check"

# Test 2: Get All Portfolios (empty)
test_endpoint "GET" "$API_URL/api/Portfolio" "" "Get All Portfolios (initially empty)"

# Test 3: Create Portfolio 1
test_endpoint "POST" "$API_URL/api/Portfolio" '{
    "title": "John Doe Portfolio",
    "description": "Full-stack developer portfolio",
    "userId": "user123",
    "isPublic": true
}' "Create First Portfolio"

# Test 4: Create Portfolio 2
test_endpoint "POST" "$API_URL/api/Portfolio" '{
    "title": "Private Projects",
    "description": "Collection of private projects",
    "userId": "user123",
    "isPublic": false
}' "Create Second Portfolio"

# Test 5: Get All Portfolios
test_endpoint "GET" "$API_URL/api/Portfolio" "" "Get All Portfolios"

# Test 6: Get Portfolio by ID
test_endpoint "GET" "$API_URL/api/Portfolio/1" "" "Get Portfolio by ID (1)"

# Test 7: Get Portfolios by User
test_endpoint "GET" "$API_URL/api/Portfolio/user/user123" "" "Get Portfolios by User ID"

# Test 8: Create Project 1
test_endpoint "POST" "$API_URL/api/Project" '{
    "title": "E-commerce Website",
    "description": "Full-stack e-commerce platform",
    "projectUrl": "https://ecommerce-demo.com",
    "gitHubUrl": "https://github.com/johndoe/ecommerce",
    "startDate": "2024-01-15T00:00:00Z",
    "isCompleted": false,
    "portfolioId": 1
}' "Create First Project"

# Test 9: Create Project 2
test_endpoint "POST" "$API_URL/api/Project" '{
    "title": "Task Management API",
    "description": "RESTful API for task management",
    "startDate": "2024-03-01T00:00:00Z",
    "endDate": "2024-05-15T00:00:00Z",
    "isCompleted": true,
    "portfolioId": 1
}' "Create Second Project"

# Test 10: Get All Projects
test_endpoint "GET" "$API_URL/api/Project" "" "Get All Projects"

# Test 11: Get Projects by Portfolio
test_endpoint "GET" "$API_URL/api/Project/portfolio/1" "" "Get Projects in Portfolio 1"

# Test 12: Get Portfolio with Projects
test_endpoint "GET" "$API_URL/api/Portfolio/1/with-projects" "" "Get Portfolio with Projects"

# Test 13: Update Portfolio
test_endpoint "PUT" "$API_URL/api/Portfolio/1" '{
    "id": 1,
    "title": "Updated John Doe Portfolio",
    "description": "Senior Full-stack developer portfolio",
    "isPublic": true
}' "Update Portfolio"

# Test 14: Complete Project
test_endpoint "PATCH" "$API_URL/api/Project/1/complete" '{
    "endDate": "2024-06-26T00:00:00Z"
}' "Complete Project"

# Test 15: Toggle Portfolio Visibility
test_endpoint "PATCH" "$API_URL/api/Portfolio/1/toggle-visibility" "" "Toggle Portfolio Visibility"

echo -e "\n${GREEN}========================================${NC}"
echo -e "${GREEN}    API Testing Completed!              ${NC}"
echo -e "${GREEN}========================================${NC}"
````

## üöÄ **‡∏ß‡∏¥‡∏ò‡∏µ‡πÉ‡∏ä‡πâ Script ‡πÅ‡∏ö‡∏ö‡∏á‡πà‡∏≤‡∏¢:**

```bash
# ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå script
cd /Users/nevelopdevper/iDev/ABC/Backend
nano test-api-simple.sh

# Copy script ‡∏Ç‡πâ‡∏≤‡∏á‡∏ö‡∏ô‡πÉ‡∏™‡πà‡πÉ‡∏ô‡πÑ‡∏ü‡∏•‡πå

# ‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡∏£‡∏±‡∏ô‡πÑ‡∏î‡πâ
chmod +x test-api-simple.sh

# ‡∏£‡∏±‡∏ô‡∏ó‡∏î‡∏™‡∏≠‡∏ö
./test-api-simple.sh
```

Script ‡∏ô‡∏µ‡πâ‡∏à‡∏∞:
- ‚úÖ ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏ä‡πâ jq
- üé® ‡∏°‡∏µ‡∏™‡∏µ‡∏™‡∏ß‡∏¢‡∏á‡∏≤‡∏°
- ‚è∏Ô∏è ‡∏´‡∏¢‡∏∏‡∏î‡∏£‡∏≠‡πÉ‡∏´‡πâ‡∏Å‡∏î Enter ‡∏ó‡∏∏‡∏Å‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô
- üìä ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏• HTTP status code
- üîç ‡πÅ‡∏™‡∏î‡∏á response ‡πÅ‡∏ö‡∏ö‡∏¢‡πà‡∏≠

‡∏•‡∏≠‡∏á‡πÉ‡∏ä‡πâ‡∏î‡∏π‡∏Ñ‡∏£‡∏±‡∏ö! üéØ

1 chmod +x /Users/nevelopdevper/iDev/ABC/Backend/Testscript/test-api.sh
2 cd /Users/nevelopdevper/iDev/ABC/Backend/Testscript
./test-api.sh > test-results.log 2>&1

3 cd /Users/nevelopdevper/iDev/ABC/Backend/Testscript
./test-api.sh | less
